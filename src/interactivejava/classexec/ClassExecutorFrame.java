package interactivejava.classexec;

import master.MethodInvocationUtils;
import master.RuntimeCompiler;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.OutputStream;
import java.io.PrintStream;

public class ClassExecutorFrame extends JFrame {
    public JTextPane outputPane, codeInput;

    public ClassExecutorFrame() {
        setLayout(new BorderLayout());
        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new GridLayout(2, 1, 10, 10));
        codeInput = new JTextPane();
        codeInput.setText("" +
                "public class Solution{\n" +
                "    public static void main(){\n" +
                "        /* IMPORTANT :- \n" +
                "           The class must be named as Solution\n" +
                "           and must have a method called main()\n" +
                "           as already generated. You are free to\n" +
                "           remove this comment. But do not remove\n" +
                "           code.\n" +
                "           This code can be generated by clicking\n" +
                "           the generate Boilerplate button.\n" +
                "           \n" +
                "           Do not use Scanner or BufferedReader Through System.in to take inputs.\n" +
                "           Use Utils.input(message) for taking a string input!" +
                "        */\n" +
                "        System.out.println(\"Hello World\");\n" +
                "    }\n" +
                "}" +
                "");
        codeInput.setFont(new Font("Arial", Font.PLAIN, 20));
        JScrollPane scrollPaneInput = new JScrollPane(codeInput);
        centerPanel.add(scrollPaneInput);
        outputPane = new JTextPane();
        outputPane.setFont(new Font("Arial", Font.PLAIN, 20));
        outputPane.setText("Click on Information Button for details!");
        JScrollPane scrollPane = new JScrollPane(outputPane);
        centerPanel.add(scrollPane, BorderLayout.CENTER);
        add(centerPanel, BorderLayout.CENTER);
        JPanel eastPanel = new JPanel();
        eastPanel.setLayout(new GridLayout(4, 1, 10, 10));
        JButton execute = new JButton("Execute");
        execute.addActionListener(actionEvent -> new Thread(() -> {
            final String[] t = {""};
            PrintStream stdoutDefault = System.out;
            System.setOut(new PrintStream(new OutputStream() {
                @Override
                public void write(int b) {
                    t[0] += (char) b;
                }
            }));
            if (codeInput.getText().contains("System.set") || codeInput.getText().contains("System.in") || codeInput.getText().contains(".exit()") || codeInput.getText().contains("Runtime")) {
                JOptionPane.showMessageDialog(null, "The command you are trying to execute is not Allowed.");
                return;
            }
            RuntimeCompiler runtimeCompiler = new RuntimeCompiler();
            runtimeCompiler.addClass("Solution", "" +
                    "import javax.swing.*;" +
                    "\n" +
                    "" + codeInput.getText()+  "" +
                    "\nclass Utils{\n" +
                    "public static String input(String message){\n" +
                    "    return JOptionPane.showInputDialog(null, message);\n" +
                    "}\n" +
                    "}" +
                    "");
            if (runtimeCompiler.compile()) {
                try {
                    Object result = MethodInvocationUtils.invokeStaticMethod(runtimeCompiler.getCompiledClass("Solution"), "main");
                    if (result == null) {
                        outputPane.setText("Output : -\n\n" +
                                t[0]
                                + "\n\n");
                    } else {
                        outputPane.setText("Output : -\n\n" +
                                t[0]
                                + "\n\n");
                    }
                }catch (Exception ex){
                    JOptionPane.showMessageDialog(this, "Error in executing code!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error in Execution!", "Error", JOptionPane.ERROR_MESSAGE);
                outputPane.setText(runtimeCompiler.debug);
            }
            System.setOut(stdoutDefault);
        }).start());
        eastPanel.add(execute);
        JButton showInformation = new JButton("Information");
        showInformation.addActionListener(actionEvent -> outputPane.setText("" +
                "Interactive Java Execution\n\n\n" +
                "" +
                "This is a solution for students wanting to learn\n" +
                "Java and for teachers Teaching Java.\n\n" +
                "" +
                "This removes the long and boring parts of\n" +
                "programming like writing a whole class,\n" +
                "main method, etc. compiling it just for the\n" +
                "sake of running a simple statement.\n\n" +
                "With this software you can just execute\n" +
                "single line expressions, statements, snippets,\n" +
                "etc. Just with a single Click!\n\n" +
                "Get the output and errors in the same place easily.\n" +
                "" +
                "However some things are not allowed like :-\n\n" +
                "You are not allowed to write any malicious\n" +
                "piece of code!" +
                ""));
        eastPanel.add(showInformation);
        JButton examples = new JButton("Generate Boilerplate");
        examples.addActionListener(actionEvent -> codeInput.setText("" +
                "public class Solution{\n" +
                "    public static void main(){\n" +
                "        /* IMPORTANT :- \n" +
                "           The class must be named as Solution\n" +
                "           and must have a method called main()\n" +
                "           as already generated. You are free to\n" +
                "           remove this comment. But do not remove\n" +
                "           code.\n" +
                "           This code can be generated by clicking\n" +
                "           the generate Boilerplate button.\n" +
                "           \n" +
                "           Do not use Scanner or BufferedReader Through System.in to take inputs.\n" +
                "           Use Utils.input(message) for taking a string input!" +
                "        */\n" +
                "        System.out.println(\"Hello World\");\n" +
                "    }\n" +
                "}" +
                ""));
        eastPanel.add(examples);
        JButton close = new JButton("Close");
        close.addActionListener(actionEvent -> dispose());
        eastPanel.add(close);

        add(eastPanel, BorderLayout.EAST);
        setSize(700, 700);
        setLocationRelativeTo(null);
    }

    public void launch() {
        setVisible(true);
    }
}
